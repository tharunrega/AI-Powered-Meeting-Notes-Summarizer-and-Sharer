import { NextRequest, NextResponse } from 'next/server';
import { sendEmail } from '@/lib/mailer';

export async function POST(request: NextRequest) {
  try {
    console.log('Share API called');
    const { to, subject, summary } = await request.json();
    
    console.log('Request data:', { 
      to, 
      subject, 
      summaryLength: summary?.length 
    });
    
    if (!to || !Array.isArray(to) || to.length === 0) {
      console.log('Error: No recipients provided');
      return NextResponse.json({ error: 'At least one recipient email is required' }, { status: 400 });
    }
    
    if (!summary) {
      console.log('Error: No summary provided');
      return NextResponse.json({ error: 'Summary is required' }, { status: 400 });
    }
    
    // Format the email
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { font-size: 20px; margin-bottom: 20px; color: #2563eb; }
          .content { white-space: pre-line; }
          .footer { margin-top: 30px; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">Meeting Summary</div>
          <div class="content">${summary}</div>
          <div class="footer">
            Generated by AI-Meeting Summarizer
          </div>
        </div>
      </body>
      </html>
    `;
    
    // Keep track of all attempted providers and their results
    const attempts = [];
    
    // Try SendGrid first
    console.log('Attempting to send email with SendGrid');
    const sendGridResult = await sendEmail({
      to,
      subject: subject || 'Meeting Summary',
      text: summary,
      html,
      provider: 'sendgrid'
    });
    
    attempts.push({ provider: 'SendGrid', result: sendGridResult });
    
    if (sendGridResult.success) {
      return NextResponse.json({ 
        message: sendGridResult.message,
        provider: 'sendgrid'
      });
    }
    
    // Try Nodemailer as fallback
    console.log('SendGrid failed, trying Nodemailer as fallback');
    const nodemailerResult = await sendEmail({
      to,
      subject: subject || 'Meeting Summary',
      text: summary,
      html,
      provider: 'nodemailer'
    });
    
    attempts.push({ provider: 'Nodemailer', result: nodemailerResult });
    
    if (nodemailerResult.success) {
      return NextResponse.json({ 
        message: nodemailerResult.message,
        provider: 'nodemailer'
      });
    }
    
    // As a last resort, offer the simulation option (for demonstration)
    console.log('Both SendGrid and Nodemailer failed, switching to simulation mode');
    
    // Return special response for email simulation
    return NextResponse.json({ 
      message: "Email service unavailable - switching to simulation mode",
      provider: 'simulation',
      simulationData: {
        to,
        subject: subject || 'Meeting Summary',
        summary
      }
    });
    
    // The simulation mode is handled on the client side
    
    // If all attempts failed
    const attemptDetails = attempts.map(a => 
      `${a.provider}: ${a.result.message}`
    ).join(', ');
    
    return NextResponse.json({ 
      error: `All email sending methods failed: ${attemptDetails}`,
      emailServiceStatus: {
        sendGridConfigured: !!process.env.SENDGRID_API_KEY,
        nodemailerConfigured: !!(process.env.EMAIL_USER && process.env.EMAIL_PASSWORD),
        fromEmailConfigured: !!process.env.EMAIL_FROM,
        attempts
      }
    }, { status: 500 });
    
  } catch (error) {
    console.error('Error in share API:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to share summary' },
      { status: 500 }
    );
  }
}
