'use client';

import React, { useState } from 'react';
import { jsPDF } from 'jspdf';

interface EmailExportProps {
  recipients: string;
  subject: string;
  summary: string;
}

export default function EmailExport({ recipients, subject, summary }: EmailExportProps) {
  const [showOptions, setShowOptions] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const [exportType, setExportType] = useState<'pdf' | 'html' | null>(null);

  // Format recipients for display
  const formattedRecipients = recipients
    .split(/[\s,]+/)
    .filter(Boolean)
    .join(', ');

  // Get current date formatted
  const currentDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  // Export as HTML function
  const handleExportHtml = async () => {
    try {
      setIsExporting(true);
      setExportType('html');
      
      // Add a small delay to show loading state
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Create HTML content with improved styling
      const htmlContent = `<!DOCTYPE html>
<html>
<head>
  <title>Meeting Summary - ${subject}</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      line-height: 1.6;
      color: #333;
      margin: 0;
      padding: 0;
      background-color: #f5f7fa;
    }
    .container {
      max-width: 800px;
      margin: 40px auto;
      background: white;
      border-radius: 8px;
      padding: 40px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.05);
    }
    .header {
      margin-bottom: 30px;
      border-bottom: 1px solid #eaeaea;
      padding-bottom: 20px;
    }
    .header h1 {
      color: #2950a9;
      margin: 0 0 10px 0;
      font-weight: 600;
      font-size: 28px;
    }
    .header p {
      color: #888;
      margin: 0;
      font-size: 14px;
    }
    .email-field {
      margin-bottom: 20px;
    }
    .field-label {
      font-size: 13px;
      color: #555;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-bottom: 8px;
    }
    .field-value {
      font-size: 16px;
      word-break: break-word;
    }
    .content {
      background: #f9f9f9;
      border-left: 4px solid #2950a9;
      border-radius: 3px;
      padding: 20px;
      margin-top: 5px;
      white-space: pre-line;
      line-height: 1.8;
    }
    .footer {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #eaeaea;
      font-size: 12px;
      color: #888;
      text-align: center;
    }
    .disclaimer {
      font-size: 11px;
      margin-top: 15px;
      color: #aaa;
    }
    @media print {
      body {
        background-color: white;
      }
      .container {
        box-shadow: none;
        margin: 0;
        padding: 20px;
        max-width: 100%;
      }
      .footer {
        page-break-before: avoid;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Meeting Summary</h1>
      <p>Generated on ${currentDate}</p>
    </div>
    
    <div class="email-field">
      <div class="field-label">Recipients</div>
      <div class="field-value">${formattedRecipients}</div>
    </div>
    
    <div class="email-field">
      <div class="field-label">Subject</div>
      <div class="field-value">${subject}</div>
    </div>
    
    <div class="email-field">
      <div class="field-label">Message Content</div>
      <div class="content">${summary}</div>
    </div>
    
    <div class="footer">
      Generated by AI Meeting Notes Summarizer on ${currentDate}
      <div class="disclaimer">
        This document contains an AI-generated summary of a meeting. The content has been optimized for readability and clarity.
      </div>
    </div>
  </div>
</body>
</html>`;
      
      // Create a blob and download with improved filename
      const element = document.createElement('a');
      const file = new Blob([htmlContent], { type: 'text/html' });
      element.href = URL.createObjectURL(file);
      
      // Create a clean filename from the subject
      const cleanSubject = (subject || 'Meeting Summary')
        .replace(/[^a-z0-9]/gi, '-')
        .replace(/-+/g, '-')
        .toLowerCase();
      
      element.download = `meeting-summary-${cleanSubject}.html`;
      
      // Trigger download
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    } catch (error) {
      console.error('Error exporting HTML:', error);
      alert('Failed to export as HTML. Please try again.');
    } finally {
      setIsExporting(false);
      setExportType(null);
    }
  };
  
  // Export as PDF function
  const handleExportPdf = async () => {
    try {
      setIsExporting(true);
      setExportType('pdf');
      
      // Add a small delay to show loading state
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const doc = new jsPDF();
      
      // Add title with styling
      doc.setTextColor(41, 80, 153); // Blue color for header
      doc.setFontSize(22);
      doc.setFont('helvetica', 'bold');
      doc.text('Meeting Summary Email', 20, 20);
      
      // Add date with styling
      doc.setTextColor(100, 100, 100); // Gray color for metadata
      doc.setFontSize(10);
      doc.setFont('helvetica', 'italic');
      doc.text(`Generated on: ${currentDate}`, 20, 30);
      
      // Add horizontal line
      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.5);
      doc.line(20, 35, 190, 35);
      
      // Add email details with better formatting
      doc.setTextColor(0, 0, 0); // Reset to black for content
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(11);
      doc.text('To:', 20, 45);
      doc.setFont('helvetica', 'normal');
      
      // Handle long recipient lists by wrapping text
      const recipientText = doc.splitTextToSize(formattedRecipients, 150);
      doc.text(recipientText, 35, 45);
      
      // Calculate vertical position based on recipient text height
      const recipientHeight = recipientText.length * 5;
      const subjectY = 45 + recipientHeight + 5;
      
      doc.setFont('helvetica', 'bold');
      doc.text('Subject:', 20, subjectY);
      doc.setFont('helvetica', 'normal');
      
      // Handle long subjects by wrapping text
      const subjectText = doc.splitTextToSize(subject, 150);
      doc.text(subjectText, 35, subjectY);
      
      // Calculate vertical position based on subject text height
      const subjectHeight = subjectText.length * 5;
      const messageY = subjectY + subjectHeight + 10;
      
      // Add another separator line before message
      doc.setDrawColor(220, 220, 220);
      doc.setLineWidth(0.3);
      doc.line(20, messageY - 5, 190, messageY - 5);
      
      doc.setFont('helvetica', 'bold');
      doc.text('Message:', 20, messageY);
      doc.setFont('helvetica', 'normal');
      
      // Add summary content with word wrapping
      const splitText = doc.splitTextToSize(summary, 170);
      doc.text(splitText, 20, messageY + 10);
      
      // Add footer with page numbers
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(150, 150, 150);
        doc.text(`Generated with AI Meeting Summarizer - Page ${i} of ${pageCount}`, 20, 285);
      }
      
      // Create a clean filename from the subject
      const cleanSubject = (subject || 'Meeting Summary')
        .replace(/[^a-z0-9]/gi, '-')
        .replace(/-+/g, '-')
        .toLowerCase();
        
      // Save the PDF with a well-formatted filename
      doc.save(`meeting-summary-${cleanSubject}.pdf`);
    } catch (error) {
      console.error('Error exporting PDF:', error);
      alert('Failed to export as PDF. Please try again.');
    } finally {
      setIsExporting(false);
      setExportType(null);
    }
  };

  // Check if we have the necessary content to export
  const hasContent = summary && recipients;

  // Prepare mailto link with content
  const mailtoHref = `mailto:${formattedRecipients}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(summary)}`;

  return (
    <div>
      {hasContent && (
        <div className="flex items-center space-x-2 mb-2">
          <button
            onClick={() => setShowOptions(!showOptions)}
            className="text-sm text-blue-600 hover:text-blue-800 flex items-center"
            disabled={isExporting}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clipRule="evenodd" />
            </svg>
            {showOptions ? "Hide Export Options" : "Export Email Content"}
          </button>
        </div>
      )}

      {showOptions && (
        <div className="bg-gray-50 p-3 rounded border border-gray-200 text-sm">
          <p className="mb-2">Export options for email content:</p>
          <div className="flex space-x-3">
            <button
              onClick={handleExportPdf}
              disabled={isExporting}
              className="flex items-center px-3 py-2 border border-gray-300 shadow-sm text-xs leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              {isExporting && exportType === 'pdf' ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Exporting...
                </>
              ) : (
                <>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
                  </svg>
                  PDF
                </>
              )}
            </button>
            <button
              onClick={handleExportHtml}
              disabled={isExporting}
              className="flex items-center px-3 py-2 border border-gray-300 shadow-sm text-xs leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              {isExporting && exportType === 'html' ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Exporting...
                </>
              ) : (
                <>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                  HTML
                </>
              )}
            </button>
            <a
              href={mailtoHref}
              className="flex items-center px-3 py-2 border border-gray-300 shadow-sm text-xs leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onClick={(e) => isExporting && e.preventDefault()}
              style={{ pointerEvents: isExporting ? 'none' : 'auto', opacity: isExporting ? 0.7 : 1 }}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
              </svg>
              Open in Mail
            </a>
          </div>
          
          {/* Add a notification for successful export */}
          {!isExporting && (
            <div className="text-xs text-gray-500 mt-2">
              <p>
                Files will be downloaded to your device.
                You can also use the &quot;Open in Mail&quot; option to open your default email client.
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
